// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetServerDateTimeResponse, GetFeatureFlagsResponse, PostAuthRegisterData, PostAuthRegisterResponse, PostAuthLoginData, PostAuthLoginResponse, PostAuthRefreshResponse, PutAuthChangePasswordData, PutAuthChangePasswordResponse, DeleteAuthLogoutResponse, GetMeResponse, PutMeData, PutMeResponse, GetUsersSearchData, GetUsersSearchResponse, GetUsersData, GetUsersResponse, PostUsersData, PostUsersResponse, GetUsersByUserIdData, GetUsersByUserIdResponse, PutUsersByUserIdData, PutUsersByUserIdResponse, DeleteUsersByUserIdData, DeleteUsersByUserIdResponse, DeleteUsersByUserIdArchiveData, DeleteUsersByUserIdArchiveResponse, GetGroupsSearchData, GetGroupsSearchResponse, PostGroupsData, PostGroupsResponse, GetGroupsByGroupIdData, GetGroupsByGroupIdResponse, PutGroupsByGroupIdData, PutGroupsByGroupIdResponse, DeleteGroupsByGroupIdData, DeleteGroupsByGroupIdResponse, PutGroupsByGroupIdArchiveData, PutGroupsByGroupIdArchiveResponse, GetGroupMembersSearchData, GetGroupMembersSearchResponse, PostGroupMembersData, PostGroupMembersResponse, GetGroupMembersByGroupMemberIdData, GetGroupMembersByGroupMemberIdResponse, PutGroupMembersByGroupMemberIdData, PutGroupMembersByGroupMemberIdResponse, DeleteGroupMembersByGroupMemberIdData, DeleteGroupMembersByGroupMemberIdResponse, PutGroupMembersByGroupMemberIdArchiveData, PutGroupMembersByGroupMemberIdArchiveResponse, GetGroupExpensesSearchData, GetGroupExpensesSearchResponse, PostGroupExpensesData, PostGroupExpensesResponse, GetGroupExpensesByGroupExpenseIdData, GetGroupExpensesByGroupExpenseIdResponse, PutGroupExpensesByGroupExpenseIdData, PutGroupExpensesByGroupExpenseIdResponse, DeleteGroupExpensesByGroupExpenseIdData, DeleteGroupExpensesByGroupExpenseIdResponse, PutGroupExpensesByGroupExpenseIdArchiveData, PutGroupExpensesByGroupExpenseIdArchiveResponse } from './types.gen';

/**
 * Retrieve the server date time
 * Retrieve the server date time.
 * @returns string Server date time retrieved successfully
 * @throws ApiError
 */
export const getServerDateTime = (): CancelablePromise<GetServerDateTimeResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/server/date-time'
}); };

/**
 * Retrieve the feature flag
 * Retrieve the feature flag.
 * @returns FeatureFlag Feature flag retrieved successfully
 * @throws ApiError
 */
export const getFeatureFlags = (): CancelablePromise<GetFeatureFlagsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/feature-flags'
}); };

/**
 * Register new user
 * Register a new user.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns string Account registered successfully
 * @throws ApiError
 */
export const postAuthRegister = (data: PostAuthRegisterData = {}): CancelablePromise<PostAuthRegisterResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/auth/register',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Login to account
 * Login to your account.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Login successfully
 * @throws ApiError
 */
export const postAuthLogin = (data: PostAuthLoginData = {}): CancelablePromise<PostAuthLoginResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/auth/login',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Refresh session
 * Refresh the session of the user.
 * @returns unknown Session refreshed successfully
 * @throws ApiError
 */
export const postAuthRefresh = (): CancelablePromise<PostAuthRefreshResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/auth/refresh'
}); };

/**
 * Change password
 * Change password for current account.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns string Password changed successfully
 * @throws ApiError
 */
export const putAuthChangePassword = (data: PutAuthChangePasswordData = {}): CancelablePromise<PutAuthChangePasswordResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/auth/change-password',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Logout user
 * Logout user by invalidating cookies
 * @returns string Logout successful
 * @throws ApiError
 */
export const deleteAuthLogout = (): CancelablePromise<DeleteAuthLogoutResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/auth/logout'
}); };

/**
 * Retrieve my profile
 * Retrieve your profile.
 * @returns User My profile retrieved successfully
 * @throws ApiError
 */
export const getMe = (): CancelablePromise<GetMeResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/me'
}); };

/**
 * Update my profile
 * Update your profile.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns User My profile updated successfully
 * @throws ApiError
 */
export const putMe = (data: PutMeData = {}): CancelablePromise<PutMeResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/me',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Search users
 * Search for users.
 * @param data The data for the request.
 * @param data.limit
 * @param data.page
 * @param data.orderBy
 * @param data.includeArchived
 * @param data.search
 * @param data.sortBy
 * @returns unknown Users retrieved successfully
 * @throws ApiError
 */
export const getUsersSearch = (data: GetUsersSearchData = {}): CancelablePromise<GetUsersSearchResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/users/search',
    query: {
        limit: data.limit,
        page: data.page,
        order_by: data.orderBy,
        include_archived: data.includeArchived,
        search: data.search,
        sort_by: data.sortBy
    }
}); };

/**
 * List all users
 * Retrieve a list of all users.
 * @param data The data for the request.
 * @param data.limit
 * @param data.page
 * @param data.orderBy
 * @param data.includeArchived
 * @param data.sortBy
 * @returns unknown Users retrieved successfully
 * @throws ApiError
 */
export const getUsers = (data: GetUsersData = {}): CancelablePromise<GetUsersResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/users',
    query: {
        limit: data.limit,
        page: data.page,
        order_by: data.orderBy,
        include_archived: data.includeArchived,
        sort_by: data.sortBy
    }
}); };

/**
 * Create a user
 * Create a new user.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns User User created successfully
 * @throws ApiError
 */
export const postUsers = (data: PostUsersData = {}): CancelablePromise<PostUsersResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/users',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Retrieve a user
 * Retrieve the details of a user.
 * @param data The data for the request.
 * @param data.userId
 * @returns User User retrieved successfully
 * @throws ApiError
 */
export const getUsersByUserId = (data: GetUsersByUserIdData): CancelablePromise<GetUsersByUserIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/users/{user_id}',
    path: {
        user_id: data.userId
    }
}); };

/**
 * Update a user
 * Update a user.
 * @param data The data for the request.
 * @param data.userId
 * @param data.requestBody
 * @returns User User updated successfully
 * @throws ApiError
 */
export const putUsersByUserId = (data: PutUsersByUserIdData): CancelablePromise<PutUsersByUserIdResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/users/{user_id}',
    path: {
        user_id: data.userId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Delete a user
 * Delete a user.
 * @param data The data for the request.
 * @param data.userId
 * @returns User User deleted successfully
 * @throws ApiError
 */
export const deleteUsersByUserId = (data: DeleteUsersByUserIdData): CancelablePromise<DeleteUsersByUserIdResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/users/{user_id}',
    path: {
        user_id: data.userId
    }
}); };

/**
 * Archive a user
 * Archive a user.
 * @param data The data for the request.
 * @param data.userId
 * @returns User User archived successfully
 * @throws ApiError
 */
export const deleteUsersByUserIdArchive = (data: DeleteUsersByUserIdArchiveData): CancelablePromise<DeleteUsersByUserIdArchiveResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/users/{user_id}/archive',
    path: {
        user_id: data.userId
    }
}); };

/**
 * Search groups
 * Search for groups with optional filters and pagination.
 * @param data The data for the request.
 * @param data.limit
 * @param data.page
 * @param data.sortBy
 * @param data.orderBy
 * @param data.includeArchived
 * @param data.searchText
 * @returns unknown Groups retrieved successfully
 * @throws ApiError
 */
export const getGroupsSearch = (data: GetGroupsSearchData): CancelablePromise<GetGroupsSearchResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/groups/search',
    query: {
        limit: data.limit,
        page: data.page,
        sort_by: data.sortBy,
        order_by: data.orderBy,
        include_archived: data.includeArchived,
        search_text: data.searchText
    }
}); };

/**
 * Create a group
 * Create a new group.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Group Group created successfully
 * @throws ApiError
 */
export const postGroups = (data: PostGroupsData = {}): CancelablePromise<PostGroupsResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/groups',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Retrieve a group
 * Retrieve the details of a group.
 * @param data The data for the request.
 * @param data.groupId
 * @returns Group Group retrieved successfully
 * @throws ApiError
 */
export const getGroupsByGroupId = (data: GetGroupsByGroupIdData): CancelablePromise<GetGroupsByGroupIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/groups/{group_id}',
    path: {
        group_id: data.groupId
    }
}); };

/**
 * Update a group
 * Update the details of a group.
 * @param data The data for the request.
 * @param data.groupId
 * @param data.requestBody
 * @returns Group Group updated successfully
 * @throws ApiError
 */
export const putGroupsByGroupId = (data: PutGroupsByGroupIdData): CancelablePromise<PutGroupsByGroupIdResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/groups/{group_id}',
    path: {
        group_id: data.groupId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Delete a group
 * Delete a group permanently.
 * @param data The data for the request.
 * @param data.groupId
 * @returns unknown Group deleted successfully
 * @throws ApiError
 */
export const deleteGroupsByGroupId = (data: DeleteGroupsByGroupIdData): CancelablePromise<DeleteGroupsByGroupIdResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/groups/{group_id}',
    path: {
        group_id: data.groupId
    }
}); };

/**
 * Archive a group
 * Archive a group (soft delete).
 * @param data The data for the request.
 * @param data.groupId
 * @returns Group Group archived successfully
 * @throws ApiError
 */
export const putGroupsByGroupIdArchive = (data: PutGroupsByGroupIdArchiveData): CancelablePromise<PutGroupsByGroupIdArchiveResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/groups/{group_id}/archive',
    path: {
        group_id: data.groupId
    }
}); };

/**
 * Search group members
 * Search for group members with optional filters and pagination.
 * @param data The data for the request.
 * @param data.limit
 * @param data.page
 * @param data.sortBy
 * @param data.orderBy
 * @param data.includeArchived
 * @param data.groupId
 * @param data.userId
 * @returns unknown Group members retrieved successfully
 * @throws ApiError
 */
export const getGroupMembersSearch = (data: GetGroupMembersSearchData): CancelablePromise<GetGroupMembersSearchResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/group-members/search',
    query: {
        limit: data.limit,
        page: data.page,
        sort_by: data.sortBy,
        order_by: data.orderBy,
        include_archived: data.includeArchived,
        group_id: data.groupId,
        user_id: data.userId
    }
}); };

/**
 * Create a group member
 * Add a member to a group.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns GroupMember Group member created successfully
 * @throws ApiError
 */
export const postGroupMembers = (data: PostGroupMembersData = {}): CancelablePromise<PostGroupMembersResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/group-members',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Retrieve a group member
 * Retrieve the details of a group member.
 * @param data The data for the request.
 * @param data.groupMemberId
 * @returns GroupMember Group member retrieved successfully
 * @throws ApiError
 */
export const getGroupMembersByGroupMemberId = (data: GetGroupMembersByGroupMemberIdData): CancelablePromise<GetGroupMembersByGroupMemberIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/group-members/{group_member_id}',
    path: {
        group_member_id: data.groupMemberId
    }
}); };

/**
 * Update a group member
 * Update the details of a group member.
 * @param data The data for the request.
 * @param data.groupMemberId
 * @param data.requestBody
 * @returns GroupMember Group member updated successfully
 * @throws ApiError
 */
export const putGroupMembersByGroupMemberId = (data: PutGroupMembersByGroupMemberIdData): CancelablePromise<PutGroupMembersByGroupMemberIdResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/group-members/{group_member_id}',
    path: {
        group_member_id: data.groupMemberId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Delete a group member
 * Delete a group member permanently.
 * @param data The data for the request.
 * @param data.groupMemberId
 * @returns unknown Group member deleted successfully
 * @throws ApiError
 */
export const deleteGroupMembersByGroupMemberId = (data: DeleteGroupMembersByGroupMemberIdData): CancelablePromise<DeleteGroupMembersByGroupMemberIdResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/group-members/{group_member_id}',
    path: {
        group_member_id: data.groupMemberId
    }
}); };

/**
 * Archive a group member
 * Archive a group member (soft delete).
 * @param data The data for the request.
 * @param data.groupMemberId
 * @returns GroupMember Group member archived successfully
 * @throws ApiError
 */
export const putGroupMembersByGroupMemberIdArchive = (data: PutGroupMembersByGroupMemberIdArchiveData): CancelablePromise<PutGroupMembersByGroupMemberIdArchiveResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/group-members/{group_member_id}/archive',
    path: {
        group_member_id: data.groupMemberId
    }
}); };

/**
 * Search group expenses
 * Search for group expenses with optional filters and pagination.
 * @param data The data for the request.
 * @param data.limit
 * @param data.page
 * @param data.sortBy
 * @param data.orderBy
 * @param data.includeArchived
 * @param data.groupId
 * @param data.ownerId
 * @param data.searchText
 * @param data.startDate
 * @param data.endDate
 * @returns unknown Group expenses retrieved successfully
 * @throws ApiError
 */
export const getGroupExpensesSearch = (data: GetGroupExpensesSearchData): CancelablePromise<GetGroupExpensesSearchResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/group-expenses/search',
    query: {
        limit: data.limit,
        page: data.page,
        sort_by: data.sortBy,
        order_by: data.orderBy,
        include_archived: data.includeArchived,
        group_id: data.groupId,
        owner_id: data.ownerId,
        search_text: data.searchText,
        start_date: data.startDate,
        end_date: data.endDate
    }
}); };

/**
 * Create a group expense
 * Create a new expense in a group.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns GroupExpense Group expense created successfully
 * @throws ApiError
 */
export const postGroupExpenses = (data: PostGroupExpensesData = {}): CancelablePromise<PostGroupExpensesResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/group-expenses',
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Retrieve a group expense
 * Retrieve the details of a group expense.
 * @param data The data for the request.
 * @param data.groupExpenseId
 * @returns GroupExpense Group expense retrieved successfully
 * @throws ApiError
 */
export const getGroupExpensesByGroupExpenseId = (data: GetGroupExpensesByGroupExpenseIdData): CancelablePromise<GetGroupExpensesByGroupExpenseIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/group-expenses/{group_expense_id}',
    path: {
        group_expense_id: data.groupExpenseId
    }
}); };

/**
 * Update a group expense
 * Update the details of a group expense.
 * @param data The data for the request.
 * @param data.groupExpenseId
 * @param data.requestBody
 * @returns GroupExpense Group expense updated successfully
 * @throws ApiError
 */
export const putGroupExpensesByGroupExpenseId = (data: PutGroupExpensesByGroupExpenseIdData): CancelablePromise<PutGroupExpensesByGroupExpenseIdResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/group-expenses/{group_expense_id}',
    path: {
        group_expense_id: data.groupExpenseId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Delete a group expense
 * Delete a group expense permanently.
 * @param data The data for the request.
 * @param data.groupExpenseId
 * @returns unknown Group expense deleted successfully
 * @throws ApiError
 */
export const deleteGroupExpensesByGroupExpenseId = (data: DeleteGroupExpensesByGroupExpenseIdData): CancelablePromise<DeleteGroupExpensesByGroupExpenseIdResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/group-expenses/{group_expense_id}',
    path: {
        group_expense_id: data.groupExpenseId
    }
}); };

/**
 * Archive a group expense
 * Archive a group expense (soft delete).
 * @param data The data for the request.
 * @param data.groupExpenseId
 * @returns GroupExpense Group expense archived successfully
 * @throws ApiError
 */
export const putGroupExpensesByGroupExpenseIdArchive = (data: PutGroupExpensesByGroupExpenseIdArchiveData): CancelablePromise<PutGroupExpensesByGroupExpenseIdArchiveResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/group-expenses/{group_expense_id}/archive',
    path: {
        group_expense_id: data.groupExpenseId
    }
}); };